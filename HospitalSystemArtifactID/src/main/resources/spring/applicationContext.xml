<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.3.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"  >

  <!-- ①：对com.springMvc包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
  <context:component-scan base-package="com.springMvc"/>


  <mvc:interceptors>
    <mvc:interceptor>
      <!-- 先匹配所有路径，然后排除不需要检查的路径 -->
      <mvc:mapping path="/**" />
      <!-- 与登录相关的请求 -->
      <mvc:exclude-mapping path="/login" />
      <mvc:exclude-mapping path="/userLogin"/>
      <!-- 以下是静态资源 -->
      <mvc:exclude-mapping path="/assets/**" />
      <bean id="loginInterceptor" class="com.springMvc.config.interceptor.LoginInterceptor"/>
    </mvc:interceptor>
  </mvc:interceptors>

  <!-- 静态资源访问 -->
  <mvc:resources mapping="/assets/**" location="/assets/" />

  <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="messageConverters">
      <list>
        <ref bean="mappingJacksonHttpMessageConverter"/>
      </list>
    </property>
  </bean>

  <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    <property name="supportedMediaTypes">
      <list>
        <value>application/json;charset=UTF-8</value>
      </list>
    </property>
  </bean>


  <!-- 配置视图解析器，把控制器的逻辑视频映射为真正的视图 -->
  <!-- /WEB-INF/jsp/start.jsp -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/views/" />
    <property name="suffix" value=".jsp" />
  </bean>

  <!-- <context:property-placeholder location="classpath:db.properties"/> -->
  <!--数据库配置 -->
  <bean id = "propertyConfigurer" class = "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:jdbc.properties</value>
      </list>
    </property>

  </bean>

  <!-- 数据库连接池 -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${driver}"/>
    <property name="url" value="${url}"/>
    <property name="username" value="${username}"/>
    <property name="password" value="${password}"/>
    <property name="initialSize" value="1"/>
    <property name="maxActive" value="100"/>
    <property name="maxIdle" value="5"/>
    <property name="maxWait" value="80000"/>
  </bean>

  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 数据源 -->
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath:sqlmap/*Mapper.xml"/>
    <property name="typeAliasesPackage" value="com.springMvc.entity.po" />
  </bean>

  <!-- 在spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 指定扫描包的路径，就是mapper接口的路径，多个包中间以 半角逗号隔开   -->
    <property name="basePackage" value="com.springMvc.dao"/>
    <!-- 配置sqlSessionFactoryBeanName -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- 配置事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <mvc:annotation-driven />
</beans>